#- Definiendo listas vacías
all_reds = []
light_ccds = []

#- Ciclo for para reducir las imágenes
for light, file_name in files.ccds(imagetyp=science_imagetyp, return_fname=True, ccd_kwargs=dict(unit='adu')):

    #- Incluyendo un nuevo elemento a la lista
    light_ccds.append(light)

    #- Restando overscan de la image de objeto
    reduced = ccdp.subtract_overscan(light, overscan=light[:, 2055:], median=True)

    #- Cortando la imagen de objeto
    reduced = ccdp.trim_image(reduced[:, :2048])

    #- Decidiendo cuál tiempo de exposición usar
    closest_dark = find_nearest_dark_exposure(reduced, combined_darks.keys())

    #- Corrigiendo por corriente oscura
    reduced = ccdp.subtract_dark(reduced, combined_darks[closest_dark],
                                 exposure_time=exposure, exposure_unit=u.second)

    #- Seleccionando el flat adecuado de acuerdo al filtro
    good_flat = combined_flats[reduced.header['filter']]

    #- Corrigiendo por flat
    reduced = ccdp.flat_correct(reduced, good_flat)

    #- Incluyendo un nuevo elemento a la lista
    all_reds.append(reduced)

    reduced.write(calibrated_data / file_name)
